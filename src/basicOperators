var fish = 2
fish.times(3)
fish.div(2)
fish.plus(300)
fish.minus(200)
-198

var fish = 2
fish.times(3)
6

fish.plus(3)
5

fish.div(3)
0

val address : String = null
error: null can not be a value of a non-null type String
val address : String = null
                       ^

val amount : Double ?= 10.0

Dounble
error: unresolved reference: Dounble
Dounble
^

Double
kotlin.jvm.internal.DoubleCompanionObject@20d3d698

amount
10.0

amount = 11.0
error: val cannot be reassigned
amount = 11.0
^

val list ? List? = listOf(null,null)
incomplete code

val list : List? = listOf(null,null)
error: one type argument expected for interface List<out E>
val list : List? = listOf(null,null)
           ^

val list : List<Int,Int>? = listOf(null,null)
error: one type argument expected for interface List<out E>
val list : List<Int,Int>? = listOf(null,null)
               ^

val list : List<Int>? = listOf(null,null)
error: type inference failed. Expected type mismatch: inferred type is List<Nothing?> but List<Int>? was expected
val list : List<Int>? = listOf(null,null)
                        ^

val list : List<Int?> = listOf(null,null)

list?.size()
error: expression 'size' of type 'Int' cannot be invoked as a function. The function 'invoke()' is not found
list?.size()
      ^

val list : List? = listOf(null,null)
error: one type argument expected for interface List<out E>

Solve the following using the operator methods in one line of code.
If you start with 2 fish, and they breed twice, producing 71 offspring the first time, and 233 offspring the second time, and then 13 fish are swallowed by a hungry moray eel, how many fish do you have left? How many aquariums do you need if you can put 30 fish per aquarium?
Hint: You can chain method calls.
Hint: You can call the methods on numbers, and Kotlin will convert them to objects for you.
Bonus question: What is special about all the numbers of fish?

2.plus(71).plus(233).minus(13).div(30)
9


Create a String variable rainbowColor, set its color value, then change it.
Create a variable blackColor whose value cannot be changed once assigned. Try changing it anyway.
var rainbowColor ="blue"

rainbowColor
blue

rainbowColor = "white"

rainbowColor
white

val blackColor = "black"

blackColor = "blue"
error: val cannot be reassigned
blackColor = "blue"
